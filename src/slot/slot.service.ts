import { Injectable, Logger } from '@nestjs/common';
import { Slot, SlotDocument } from './schemas/slot.schema';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Markup } from 'telegraf';
import { GoogleService } from '../google/google.service';
import { Cron, CronExpression } from '@nestjs/schedule';

@Injectable()
export class SlotService {
  private readonly logger = new Logger(SlotService.name);

  constructor(
    @InjectModel(Slot.name) private slotModel: Model<SlotDocument>,
    private readonly googleService: GoogleService,
  ) {}

  async getSlotById(id: string): Promise<SlotDocument | null> {
    return this.slotModel.findById(id);
  }

  async getSlotKeyboard() {
    const slots = await this.slotModel.find().sort({ date: 1 });
    const keyboard = slots.map((slot) => [
      {
        text: `${slot.date.toLocaleString('ru-RU')} (–º–µ—Å—Ç: ${slot.maxBookings - slot.bookedCount})`,
        callback_data: `slot_${slot._id}`,
      },
    ]);
    return Markup.inlineKeyboard(keyboard);
  }

  async syncFromGoogle(): Promise<void> {
    const dtos = await this.googleService.fetchSlots();
    if (!dtos.length) {
      this.logger.warn('üü° –í Google —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤');
      return;
    }

    const newSlots = dtos.map((dto) => ({
      date: new Date(`${dto.date}T${dto.time}:00`),
      maxBookings: Number(dto.maxBookings),
    }));

    // ‚ùå –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ
    await this.slotModel.deleteMany({});
    this.logger.log('üß® –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–ª–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã');

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    await this.slotModel.insertMany(newSlots);
    this.logger.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${newSlots.length} —Å–≤–µ–∂–∏—Ö —Å–ª–æ—Ç–æ–≤ –∏–∑ Google`);
  }

  @Cron(CronExpression.EVERY_HOUR)
  async cronSyncFromGoogle() {
    this.logger.log('üïí CRON: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤');
    await this.syncFromGoogle();
  }
}
