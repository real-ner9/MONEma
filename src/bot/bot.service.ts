import { Injectable } from '@nestjs/common';
import { MyContext, RegistrationDraft } from '../types/my-context';
import { BookingService } from '../booking/booking.service';
import { SlotService } from '../slot/slot.service';
import { UserService } from '../user/user.service';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { SlotDocument } from '../slot/schemas/slot.schema';
import { InlineKeyboardMarkup } from '@telegraf/types/markup';

@Injectable()
export class BotService {
  constructor(
    private readonly bookingService: BookingService,
    private readonly slotService: SlotService,
    private readonly userService: UserService,
    @InjectBot() private readonly bot: Telegraf<MyContext>
  ) {}

  async sendReminder(telegramId: string, slotDate: Date) {
    await this.bot.telegram.sendMessage(
      telegramId,
      `üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Å—Ç–∏–Ω–≥ –≤ ${slotDate.toLocaleString('ru-RU')}`
    );
  }

  async askSlot(ctx: MyContext) {
    const keyboard = await this.slotService.getSlotKeyboard();
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:', keyboard);
    return;
  }

  async confirmSession(ctx: MyContext) {
    if (!ctx.session) return;
    const data = ctx.session.data as RegistrationDraft;
    if (!data) {
      await ctx.reply('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    await this.userService.createUser({
      telegramId: data.telegramId,
      fullName: data.fullName,
      phone: data.phone,
      portfolioUrl: data.portfolioUrl,
      username: data.username,
    });
    await this.bookingService.createBooking(data.telegramId, data.selectedSlotId);
    ctx.session = null;

    await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Å—Ç–∏–Ω–≥.');
    return;
  }

  async handleStart(ctx: MyContext) {
    const telegramId = ctx.from?.id?.toString();
    if (!telegramId || !ctx.session) return;

    const existingUser = await this.userService.findByTelegramId(telegramId);
    if (existingUser) {
      await ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
      // await this.handleMenu(ctx);
      return;
    }

    ctx.session.step = 'fullName';
    ctx.session.data = { telegramId, username: ctx.from?.username || '' };

    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
    return;
  }

  async handleProfile(ctx: MyContext) {
    const telegramId = ctx.from?.id?.toString();
    if (!telegramId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID');
      return;
    }

    const user = await this.userService.findByTelegramId(telegramId);
    if (!user) {
      await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.');
      return;
    }

    const booking = await this.bookingService.findByUserId(user._id);
    if (!booking) {
      await ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Å—Ç–∏–Ω–≥.');
      return;
    }

    await booking.populate<{ slot: SlotDocument }>('slot');
    const slot = booking.slot as unknown as SlotDocument;

    const date = slot?.date
      ? slot.date.toLocaleString('ru-RU')
      : '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞';

    await ctx.reply(
      `üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n–§–ò–û: ${user.fullName}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: ${user.portfolioUrl}\n–î–∞—Ç–∞: ${date}`
    );
    return;
  }

  async handleSyncCommand(ctx: MyContext) {
    await this.slotService.syncFromGoogle();
    await ctx.reply('üîÅ –°–ª–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    return;
  }

  async handleMenu(ctx: MyContext) {
    const telegramId = ctx.from?.id.toString();
    if (!telegramId) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID');
      return;
    }

    const user = await this.userService.findByTelegramId(telegramId);

    const keyboard: InlineKeyboardMarkup['inline_keyboard'] = [];

    if (user) {
      keyboard.push([{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }]);
    } else {
      keyboard.push([{ text: 'üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'start' }]);
    }

    const isAdmin = telegramId === process.env.ADMIN_TELEGRAM_ID;
    if (isAdmin) {
      keyboard.push([{ text: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã', callback_data: 'admin_resync' }]);
    }

    await ctx.reply('üìã –ú–µ–Ω—é', {
      reply_markup: { inline_keyboard: keyboard },
    });
    return;
  }

  async handleText(ctx: MyContext) {
    if (!ctx.session || !('text' in ctx.message!)) return;

    const step = ctx.session.step;
    const text = ctx.message.text.trim();

    if (!text || !step) return;

    switch (step) {
      case 'fullName':
        ctx.session.data.fullName = text;
        ctx.session.step = 'phone';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
        return;

      case 'phone':
        ctx.session.data.phone = text;
        ctx.session.step = 'portfolio';
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:');
        return;

      case 'portfolio':
        ctx.session.data.portfolioUrl = text;
        ctx.session.step = 'slot';
        await this.askSlot(ctx);
        return;

      case 'confirm':
        if (text.toLowerCase() === '–¥–∞') {
          await this.confirmSession(ctx);
          return;
        } else {
          await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
          return;
        }

      default:
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.');
        return;
    }
  }

  async handleSlot(ctx: MyContext) {
    if (!ctx.session) return;

    const slotId = ctx.match[1];
    const slot = await this.slotService.getSlotById(slotId);

    if (!slot) {
      await ctx.reply('‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç.');
      await this.askSlot(ctx);
      return;
    }

    ctx.session.step = 'confirm';
    ctx.session.data.selectedSlotId = slotId;

    const { fullName, phone, portfolioUrl } = ctx.session.data;

    const date = slot.date.toLocaleString('ru-RU');

    await ctx.reply(
      `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n–§–ò–û: ${fullName}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: ${portfolioUrl}\n–î–∞—Ç–∞: ${date}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å? (–î–∞ / –ù–µ—Ç)`
    );
    return;
  }
}