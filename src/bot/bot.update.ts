import { Ctx, Start, Update, Command, InjectBot, Message, Action, Hears } from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';
import { BookingService } from '../booking/booking.service';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { User, UserDocument } from '../user/schemas/user.schema';
import { Slot, SlotDocument } from '../slot/schemas/slot.schema';

@Update()
export class BotUpdate {
  constructor(
    private readonly bookingService: BookingService,
    @InjectBot() private readonly bot: Telegraf<Context>,
    @InjectModel(User.name) private userModel: Model<UserDocument>,
    @InjectModel(Slot.name) private slotModel: Model<SlotDocument>,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    if (!ctx.from) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
      return;
    }

    const telegramId = ctx.from.id.toString();
    const username = ctx.from.username;

    let user = await this.userModel.findOne({ telegramId });
    if (!user) {
      user = await this.userModel.create({
        telegramId,
        username,
        agreedToPolicy: false,
      });
    }

    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏`,
      {
        reply_markup: {
          inline_keyboard: [[{ text: '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'agree_policy' }]],
        },
      },
    );
  }

  @Command('slots')
  async showSlots(@Ctx() ctx: Context) {
    const telegramId = ctx.from?.id?.toString();
    if (!telegramId) return;

    const user = await this.userModel.findOne({ telegramId });

    if (!user?.agreedToPolicy) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏');
      return;
    }

    const slots = await this.slotModel.find({}).sort({ date: 1 });

    const keyboard = slots.map((slot) => [
      {
        text: `${slot.date.toLocaleString('ru-RU')} (–æ—Å—Ç–∞–ª–æ—Å—å ${slot.maxBookings - slot.bookedCount})`,
        callback_data: `book_slot_${slot._id}`,
      },
    ]);

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ª–æ—Ç:', {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });
  }

  @Hears('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
  async handlePhone(@Ctx() ctx: Context) {
    // —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ –Ω–∞–¥–æ
  }

  @Command('cancel')
  async cancel(@Ctx() ctx: Context) {
    await ctx.reply('–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  @Command('policy')
  async policy(@Ctx() ctx: Context) {
    await ctx.reply('üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞: https://example.com/privacy');
  }

  @Action(/.*/)
  async handleCallback(@Ctx() ctx: Context) {
    if (!ctx.from) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
      return;
    }

    const callbackData = 'data' in ctx.callbackQuery! ? ctx.callbackQuery!.data : undefined;
    if (!callbackData) return;

    const telegramId = ctx.from.id.toString();

    if (callbackData === 'agree_policy') {
      await this.userModel.findOneAndUpdate({ telegramId }, { agreedToPolicy: true });
      await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ /slots');
      return;
    }

    if (callbackData?.startsWith('book_slot_')) {
      const slotId = callbackData.replace('book_slot_', '');
      try {
        await this.bookingService.createBooking(telegramId, slotId);
        await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! ‚úÖ');
      } catch (e) {
        await ctx.reply(`–û—à–∏–±–∫–∞: ${e.message}`);
      }
    }
  }
}
