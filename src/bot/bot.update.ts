import {
  Ctx,
  Start,
  Update,
  Command,
  InjectBot,
  Hears,
  Action,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { BookingService } from '../booking/booking.service';
import { MyContext } from '../types/my-context';
import { SlotService } from '../slot/slot.service';
import { UserService } from '../user/user.service';
import { SlotDocument } from '../slot/schemas/slot.schema';

@Update()
export class BotUpdate {
  constructor(
    private readonly bookingService: BookingService,
    private readonly slotService: SlotService,
    private readonly userService: UserService,
    @InjectBot() private readonly bot: Telegraf<MyContext>
  ) {}

  @Start()
  async onStart(@Ctx() ctx: MyContext) {
    const telegramId = ctx.from?.id?.toString();
    if (!telegramId || !ctx.session) return;

    const existingUser = await this.userService.findByTelegramId(telegramId);
    if (existingUser) {
      return ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.');
    }

    ctx.session.step = 'fullName';
    ctx.session.data = { telegramId, username: ctx.from?.username || '' };

    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
  }

  @Hears(/.*/)
  async handleText(@Ctx() ctx: MyContext) {
    if (!ctx.session || !('text' in ctx.message!)) {
      return;
    }

    const step = ctx.session.step;
    const text = ctx.message.text.trim();

    if (!text || !step) return;

    switch (step) {
      case 'fullName':
        ctx.session.data.fullName = text;
        ctx.session.step = 'phone';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
        break;

      case 'phone':
        ctx.session.data.phone = text;
        ctx.session.step = 'portfolio';
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:');
        break;

      case 'portfolio':
        ctx.session.data.portfolioUrl = text;
        ctx.session.step = 'slot';
        await this.askSlot(ctx);
        break;

      case 'confirm':
        if (text.toLowerCase() === '–¥–∞') {
          await this.saveUser(ctx);
        } else {
          await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
        }
        break;

      default:
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.');
        break;
    }
  }

  private async askSlot(ctx: MyContext) {
    const keyboard = await this.slotService.getSlotKeyboard();
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:', keyboard);
  }

  @Action(/slot_(.+)/)
  async handleSlot(@Ctx() ctx: MyContext) {
    if (!ctx.session) return;
    const slotId = ctx.match[1];
    ctx.session.data.selectedSlot = slotId;
    ctx.session.step = 'confirm';

    const data = ctx.session.data;
    const slot = await this.slotService.getSlotById(slotId);

    await ctx.reply(
      `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n–§–ò–û: ${data.fullName}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: ${data.portfolioUrl}\n–î–∞—Ç–∞: ${slot?.date.toLocaleString('ru-RU')}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å? (–î–∞ / –ù–µ—Ç)`
    );
  }

  private async saveUser(ctx: MyContext) {
    if (!ctx.session) return;
    const data = ctx.session.data;
    const user = await this.userService.createUser({
      telegramId: data.telegramId,
      username: data.username,
      fullName: data.fullName,
      phone: data.phone,
      portfolioUrl: data.portfolioUrl,
      selectedSlot: data.selectedSlot,
    });

    await this.bookingService.createBooking(user.telegramId, user.selectedSlot as string);
    ctx.session = null;

    return ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Å—Ç–∏–Ω–≥.');
  }

  @Command('profile')
  async showProfile(@Ctx() ctx: MyContext) {
    const telegramId = ctx.from?.id?.toString();
    if (!telegramId) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID');

    const user = await this.userService.findByTelegramId(telegramId)
      .populate<{ selectedSlot: SlotDocument }>('selectedSlot');

    if (!user) {
      return ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.');
    }

    const date = user.selectedSlot?.date
      ? user.selectedSlot.date.toLocaleString('ru-RU')
      : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';

    return ctx.reply(
      `üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n–§–ò–û: ${user.fullName}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: ${user.portfolioUrl}\n–î–∞—Ç–∞: ${date}`
    );
  }
}
